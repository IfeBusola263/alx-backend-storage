#!/usr/bin/env python3
'''
This is a radis implemented module for caching
information.
'''
import uuid
import redis
from typing import Union, Callable


class Cache:
    '''
    The Cache class store an instance of a redis client
    flushes the db and implements methods to save the data.
    '''

    def __init__(self) -> None:
        '''
        This is the first method called at the instance of
        the class Cache.
        '''
        self._redis = redis.Redis()
        self._redis.flushdb()

    def store(self, data: Union[str, bytes, int, float]) -> str:
        '''
        This method takes a data arguments and returns the key
        used to map data in the redisDB. This key is generated by
        uuid.
        '''
        uid = str(uuid.uuid4())
        self._redis.set(uid, data)
        self._redis.save()
        return uid

    def get(self, key: str, fn: Callable = None) -> Union[
            str, bytes, int, float, None]:
        '''
        This function turns the returned byte return value from redis
        to its original data type. If the key does not exists, it returns
        None.
        '''
        value = self._redis.get(key)
        if value is None:
            return None

        if callable(fn):
            value = fn(value)
            return value
        return value

    def get_str(self, key: str) -> str:
        '''
        This function parametizes the get get function with the str callable.
        '''
        return self.get(key, str)

    def get_str(self, key: str) -> int:
        '''
        This function parametizes the get function with the int callable.
        '''
        return self.get(key, int)
        
